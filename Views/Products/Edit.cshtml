@model ItemListApp.Models.Products
@using System.Linq

@{
    ViewBag.Title = "Edit Product";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var isAdmin = Session["IsAdmin"] != null && (bool)Session["IsAdmin"];
    var ownerSingle = Model.Product_owner ?? "";
    var ownerArray = ownerSingle.Split('-');
    var selectedOwners = ownerArray.Select(x => x.Trim()).ToList();
}

<main class="main-content position-relative border-radius-lg max-height-vh-100 h-100">
    <!-- NAVBAR START -->
    <nav class="navbar navbar-main navbar-expand-lg px-0 shadow-none" id="navbarBlur" data-scroll="false">
        <div class="container-fluid py-2 py-sm-1 px-3">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb d-none d-sm-flex bg-transparent mb-0 pb-0 pt-1 px-0 me-sm-6">
                    <li class="breadcrumb-item text-sm text-white"><a class="opacity-5 text-white">Pages</a></li>
                    <li class="breadcrumb-item text-sm text-white"><a class="text-white">Products</a></li>
                    <li class="breadcrumb-item text-sm text-white"><a class="text-white">Edit</a></li>
                    <li class="breadcrumb-item text-sm text-white active" aria-current="page">@Model.Product_accessories_name</li>
                </ol>
                <h6 class="fw-bolder text-white mb-0 pe-3 pe-sm-0">Products</h6>
            </nav>
            <div class="collapse navbar-collapse me-md-0" id="navbar">
                <div class="ms-auto d-flex flex-column align-items-end">
                    <span class="d-inline text-white">Hello, @User.Identity.Name</span>
                    <a class="d-flex align-items-center justify-content-center gap-2 m-0 letter-normal fw-normal fs-6 text-white btn btn-link btn-outline-secondary shadow-none p-0"
                       href="@(isAdmin ? "https://confluencewikiprod.intra.infineon.com/display/5SInternalAudit/Admin" : "https://confluencewikiprod.intra.infineon.com/display/5SInternalAudit/User")"
                       target="_blank">
                        <div class="icon d-flex align-items-center justify-content-center">
                            <i class="fa-solid fa-globe"></i>
                        </div>
                        <span class="d-inline">E-Catalog Accessories Tutorial</span>
                    </a>
                </div>
                <div class="nav-item d-xl-none ps-3 d-flex align-items-end">
                    <a href="javascript:;" class="nav-link text-white p-0" id="iconNavbarSidenav">
                        <div class="sidenav-toggler-inner">
                            <i class="sidenav-toggler-line bg-white"></i>
                            <i class="sidenav-toggler-line bg-white"></i>
                            <i class="sidenav-toggler-line bg-white"></i>
                        </div>
                    </a>
                </div>
            </div>
        </div>
    </nav>
    <!-- NAVBAR END -->
    <!-- CONTENT START -->
    <div class="container-fluid py-5">
        <!-- EDIT FORM START -->
        <div class="row pt-4 pt-sm-0">
            <div class="col-md-9 mx-auto">
                <div class="card mb-4 border-radius-lg">
                    <div class="card-header pb-0 d-flex justify-content-between align-items-start">
                        <h5 class="justify-content-start">Edit Product</h5>
                        <a href="@Url.Action("Index")" class="btn btn-secondary">Close</a>
                    </div>
                    <div class="card-body px-4 pt-4 pb-4">
                        @using (Html.BeginForm("Edit", "Products", FormMethod.Post, new { enctype = "multipart/form-data", id = "editProductForm" }))
                        {
                            @Html.AntiForgeryToken()

                            @Html.HiddenFor(model => model.Product_id)

                            <div class="form-group mb-4">
                                <span class="text-normal"><label>Accessories Name <span class="text-danger text-sm">*</span></label></span>
                                @Html.TextBoxFor(model => model.Product_accessories_name, new { @class = "form-control w-80", required = "required", placeholder = "Example: Dust Bin" })
                                @Html.ValidationMessageFor(model => model.Product_accessories_name, "", new { @class = "text-danger d-block" })
                                <span id="accessories-name-error" class="text-danger"></span>
                            </div>

                            <div class="form-group mb-4">
                                <span class="text-normal"><label>Quantity</label></span>
                                @Html.TextBoxFor(model => model.Product_qty, new { @class = "form-control w-80", type = "number", min = "0", placeholder = "Example: 10" })
                            </div>

                            <div class="form-group mb-4">
                                <span class="text-normal"><label>Category <span class="text-danger text-sm">*</span></label></span>
                                <select class="w-80" id="categoryDropdown" name="Product_Category_id" required="required" value="@Model.Product_Category_id">
                                    @foreach (var category in ViewData["Product_Category_id"] as List<SelectListItem>)
                                    {
                                        <option value="@category.Value" @(category.Selected ? "selected" : "")>@category.Text</option>
                                    }
                                </select>
                                @Html.ValidationMessageFor(model => model.Product_Category_id, "", new { @class = "text-danger d-block" })
                            </div>

                            <div class="form-group mb-4">
                                <span class="text-normal"><label>Owner <span class="text-danger text-sm">*</span></label></span>
                                <div id="owner-checkboxes" class="d-flex flex-wrap">
                                    @foreach (var owner in ViewBag.Owners as List<ItemListApp.Models.Owners>)
                                    {
                                        bool isChecked = selectedOwners.Contains(owner.Owner_name);
                                        <div class="form-check me-3 mb-0">
                                            <input type="checkbox" class="form-check-input owner-checkbox"
                                                   name="SelectedOwners" value="@owner.Owner_name" id="owner_@owner.Owner_id"
                                                   @(isChecked ? "checked" : "") />
                                            <label class="form-check-label mb-0" for="owner_@owner.Owner_id">@owner.Owner_name</label>
                                        </div>
                                    }
                                </div>
                                <span id="owner-error" class="text-danger" style="display: none;">Please select at least one owner.</span>
                            </div>

                            <div class="form-group mb-4">
                                <span class="text-normal"><label>Department <span class="text-danger text-sm">*</span></label></span>
                                <select class="w-80" id="departmentDropdown" name="Product_dept" required="required">
                                    <option value="">-- Select Department --</option>
                                    <option value="PAM" @(Model.Product_dept == "PAM" ? "selected" : "")>PAM</option>
                                </select>
                                @Html.ValidationMessageFor(model => model.Product_dept, "", new { @class = "text-danger d-block" })
                            </div>

                            <div class="form-group mb-4">
                                <span class="text-normal"><label>Drawing</label></span>
                                @if (!string.IsNullOrEmpty(Model.Product_drawing_filepath))
                                {
                                    var drawingPaths = Model.Product_drawing_filepath.Split(';');
                                    foreach (var path in drawingPaths)
                                    {
                                        var fileName = System.IO.Path.GetFileName(path);
                                        if (!string.IsNullOrWhiteSpace(path))
                                        {
                                            <div>
                                                <a class="btn btn-link custom-btn-link-berry shadow-none mx-2 my-0 p-0" href="@Url.Content(path)" target="_blank">(@fileName)</a>
                                                <div class="form-check form-switch mx-2 my-3">
                                                    <input class="form-check-input" type="checkbox" name="RemoveDrawingFiles" value="@fileName" id="RemoveDrawing_@fileName">
                                                    <label class="form-check-label" for="RemoveDrawing_@fileName">Remove Drawing</label>
                                                </div>
                                            </div>
                                        }
                                    }
                                }
                                <input type="file" name="drawingFiles" id="drawingFiles" class="form-control w-80" accept=".jpg,.jpeg,.png,.pdf,.doc,.docx,.xls,.xlsx" multiple />
                                <small class="form-text text-muted ms-1 d-block">Allowed Formats: JPG, JPEG, PNG, PDF, DOC, DOCX, XLS, XLSX.</small>
                                <small class="form-text text-muted ms-1 d-block">Size Limit: 16 MB.</small>
                                @Html.HiddenFor(model => model.Product_drawing_filepath)
                            </div>

                            <div class="form-group mb-4">
                                <span class="text-normal"><label>Photo</label></span>
                                @if (!string.IsNullOrEmpty(Model.Product_photo_filepath))
                                {
                                    <div>
                                        <a href="@Url.Content(Model.Product_photo_filepath)" target="_blank">
                                            <img src="@Url.Content(Model.Product_photo_filepath)" class="mx-2 max-width-200 height-200 cursor-pointer" alt="Product Photo" />
                                        </a>
                                        <div class="form-check form-switch mx-2 my-3">
                                            <input class="form-check-input" type="checkbox" id="RemovePhoto" name="RemovePhoto" value="true">
                                            <label class="form-check-label" for="RemovePhoto">Remove Photo</label>
                                        </div>
                                    </div>
                                }
                                <input type="file" name="photoFile" id="photoFile" class="form-control w-80" accept="image/*" />
                                <small class="form-text text-muted ms-1 d-block">Allowed Formats: JPG, JPEG, PNG, GIF.</small>
                                <small class="form-text text-muted ms-1 d-block">Size Limit: 16 MB.</small>
                                @Html.HiddenFor(model => model.Product_photo_filepath)
                            </div>

                            <div class="form-group mb-4">
                                <span class="text-normal"><label>ECCN</label></span>
                                @Html.TextBoxFor(model => model.Product_eccn, new { @class = "form-control w-80", placeholder = "Example: H1234" })
                            </div>

                            <div class="form-group mb-4">
                                <span class="text-normal"><label>HS Code</label></span>
                                @Html.TextBoxFor(model => model.Product_hs_code, new { @class = "form-control w-80", type = "number", min = "0", placeholder = "Example: 39234000" })
                            </div>

                            <div class="form-group mb-4">
                                <span class="text-normal"><label>Vendor Name</label></span>
                                <select class="w-80" id="vendorDropdown" name="SelectedVendors" multiple>
                                    @foreach (var vendor in ViewData["Product_vendor_name"] as List<SelectListItem>)
                                    {
                                        <option value="@vendor.Value" @(vendor.Selected ? "selected" : "")>@vendor.Text</option>
                                    }
                                </select>
                            </div>

                            <div class="form-group mb-4">
                                <span class="text-normal"><label>Quotation</label></span>
                                @if (!string.IsNullOrEmpty(Model.Product_quotation_filepath))
                                {
                                    var quotationPaths = Model.Product_quotation_filepath.Split(';');
                                    foreach (var path in quotationPaths)
                                    {
                                        var fileName = System.IO.Path.GetFileName(path);
                                        if (!string.IsNullOrWhiteSpace(path))
                                        {
                                            <div>
                                                <a class="btn btn-link custom-btn-link-berry shadow-none mx-2 my-0 p-0" href="@Url.Content(path)" target="_blank">(@fileName)</a>
                                                <div class="form-check form-switch mx-2 my-3">
                                                    <input class="form-check-input" type="checkbox" name="RemoveQuotationFiles" value="@fileName" id="RemoveQuotation_@fileName">
                                                    <label class="form-check-label" for="RemoveQuotation_@fileName">Remove Quotation</label>
                                                </div>
                                            </div>
                                        }
                                    }
                                }
                                <input type="file" name="quotationFiles" id="quotationFiles" class="form-control w-80" accept=".jpg,.jpeg,.png,.pdf,.doc,.docx,.xls,.xlsx" multiple />
                                <small class="form-text text-muted ms-1 d-block">Allowed Formats: JPG, JPEG, PNG, PDF, DOC, DOCX, XLS, XLSX.</small>
                                <small class="form-text text-muted ms-1 d-block">Size Limit: 16 MB.</small>
                                @Html.HiddenFor(model => model.Product_quotation_filepath)
                            </div>

                            <input type="hidden" id="Product_last_modification" name="Product_last_modification" value="@DateTime.Now.ToString("yyyy-MM-dd")" />

                            <div class="form-group mb-4">
                                <span class="text-normal"><label>Function</label></span>
                                @Html.TextAreaFor(model => model.Product_function, new { @class = "form-control w-80", rows = "3", placeholder = "Example: FOL, EOL, TEST-BEX1, MSP-BEX2" })
                            </div>

                            <div class="form-group mb-4">
                                <span class="text-normal"><label>Remark</label></span>
                                @Html.TextAreaFor(model => model.Product_remark, new { @class = "form-control w-80", rows = "3", placeholder = "Example: Small Bin IC reject" })
                            </div>

                            <div class="row justify-content-start">
                                <div class="col-auto">
                                    <input type="submit" id="submitBtn" value="Save" class="btn btn-success btn-lg mt-3" />
                                </div>
                                <div class="col-auto">
                                    <a href="@Url.Action("Index")" class="btn btn-secondary btn-lg mt-3">Cancel</a>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <!-- EDIT FORM END -->
        <!-- FOOTER START -->
        <footer class="footer pt-3">
            <div class="container-fluid">
                <div class="row align-items-center justify-content-lg-between">
                    <div class="col-lg-6 mb-lg-0 mb-4">
                        <div class="copyright text-center text-md text-muted text-lg-start">
                            ©
                            <script>document.write(new Date().getFullYear())</script> -
                            <a class="fw-bold">OE Applications</a>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
        <!-- FOOTER END -->
    </div>
    <!-- CONTENT END -->
</main>

<script>
    $(document).ready(function () {
        new TomSelect('#categoryDropdown', {
            create: false,
            sortField: {
                field: "text",
                direction: "asc"
            }
        });

        new TomSelect("#vendorDropdown", {
            plugins: ['remove_button'],
            placeholder: "Select vendors...",
            persist: false,
            create: false
        });

        new TomSelect('#departmentDropdown', {
            create: false,
            sortField: {
                field: "text",
                direction: "asc"
            }
        });

        // File type validation
        function validateFiles(input, allowedExtensions) {
            const files = input.files;
            for (let i = 0; i < files.length; i++) {
                const fileName = files[i].name.toLowerCase();
                const isValid = allowedExtensions.some(ext => fileName.endsWith(ext));
                if (!isValid) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid File Type',
                        html: `File: <b>${fileName}</b><br>Allowed Formats: ${allowedExtensions.join(", ")}`,
                        showCloseButton: true,
                        confirmButtonColor: '#8392ab',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        input.value = "";
                    });
                    break;
                }
            }
        }

        const fileValidationMap = {
            "#photoFile": [".jpg", ".jpeg", ".png", ".gif"],
            "#drawingFiles": [".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx", ".xls", ".xlsx"],
            "#quotationFiles": [".jpg", ".jpeg", ".png", ".pdf", ".doc", ".docx", ".xls", ".xlsx"]
        };

        $.each(fileValidationMap, function (selector, extensions) {
            const input = $(selector);
            if (input.length > 0) {
                input.on("change", function () {
                    validateFiles(this, extensions);
                });
            }
        });

        // Uniqueness validation
        let isAccessoriesNameValid = true;
        let isOwnerValid = true;

        function checkUnique(field, value, errorLabel, flagVar) {
            const productId = '@Model.Product_id';

            $.ajax({
                url: '@Url.Action("CheckUnique", "Products")',
                type: 'GET',
                data: { field: field, value: value, id: productId },
                success: function (response) {
                    if (!response.isValid) {
                        $(errorLabel).text(response.message);
                        if (flagVar === "isAccessoriesNameValid") {
                            isAccessoriesNameValid = false;
                        }
                    } else {
                        $(errorLabel).text("");
                        if (flagVar === "isAccessoriesNameValid") {
                            isAccessoriesNameValid = true;
                        }
                    }
                }
            });
        }

        // Accessories name validation
        $("#Product_accessories_name").on("input", function () {
            checkUnique("Product_accessories_name", $(this).val(), "#accessories-name-error", "isAccessoriesNameValid");
        });

        // Owner validation
        function validateOwner() {
            isOwnerValid = $("input[name='SelectedOwners']:checked").length > 0;
            if (!isOwnerValid) {
                $("#owner-error").show();
            } else {
                $("#owner-error").hide();
            }
        }
        $("input[name='SelectedOwners']").on("change", validateOwner);

        // Scroll to form
        function scrollToElement(selector) {
            const el = $(selector);
            if (el.length) {
                $('html, body').animate({
                    scrollTop: el.offset().top - 100
                }, 500);

                const firstCheckbox = el.find("input:checkbox").first();
                if (firstCheckbox.length) {
                    firstCheckbox.focus();
                } else {
                    el.focus();
                }
            }
        }

        // File size validation
        function validateFileSize(e, formId) {
            const maxSize = 16 * 1024 * 1024; // 16 MB
            const selectors = ["#photoFile", "#drawingFiles", "#quotationFiles"];
            let oversizedFiles = [];

            for (const selector of selectors) {
                const input = $(`${formId} ${selector}`)[0];
                if (input && input.files && input.files.length > 0) {
                    for (let i = 0; i < input.files.length; i++) {
                        if (input.files[i].size > maxSize) {
                            let label = selector.includes("drawing") ? "Drawing" :
                                selector.includes("quotation") ? "Quotation" :
                                    "Photo";
                            oversizedFiles.push({ name: input.files[i].name, type: label });
                        }
                    }
                }
            }

            if (oversizedFiles.length > 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'File Size Too Large',
                    html: `
                        <p style="margin-bottom: 8px;">The file below exceeds the size limit of <strong>16 MB</strong>:</p>
                        <ul style="text-align: left; padding-left: 20px; margin-top: 8px; margin-bottom: 12px;">
                            ${oversizedFiles.map(f => `
                                <li>
                                    <span style="color: #d90429;"><strong>[${f.type}]</strong></span> ${f.name}
                                </li>`).join('')}
                        </ul>
                        <p style="margin-top: 12px;">
                            Please check the uploaded file again and re-upload with the appropriate size.
                        </p>
                    `,
                    showCloseButton: true,
                    confirmButtonColor: '#8392ab',
                    confirmButtonText: 'OK'
                });
                e.preventDefault();
                return false;
            }

            return true;
        }

        $("#editProductForm").on("submit", function (e) {
            e.preventDefault();

            validateOwner();

            // Scroll to form if accessories name validation fail
            if (!isAccessoriesNameValid) {
                scrollToElement("#Product_accessories_name");
                return;
            }

            // Scroll to form if owner validation fail
            if (!isOwnerValid) {
                scrollToElement("#owner-checkboxes");
                return;
            }

            // File size validation
            if (!validateFileSize(e, "#editProductForm")) {
                return;
            }

            Swal.fire({
                title: "Update Data?",
                text: "Are you sure you want to update this product?",
                icon: "question",
                showCloseButton: true,
                showCancelButton: true,
                confirmButtonColor: '#2dce89',
                cancelButtonColor: '#8392ab',
                confirmButtonText: 'Yes, update it!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    $("button[type=submit]").prop("disabled", true);
                    this.submit();
                }
            });
        });
    });
</script>